/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
uint16_t MODO;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */



/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  uint8_t mensaje[14];
  uint16_t conteo = 0;
  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start(&htim2);



int boton;
int boton2;
int x;
uint16_t Lectura = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 1);
	  Lectura = HAL_ADC_GetValue(&hadc1);
	  //MODO=TIM_COUNTERMODE_UP;
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	  boton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	  boton2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);

	  if (boton2 == 0) //UNO LÃ“GICO
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  }
	  else
	  {
		  boton = -1;
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);

		  if (Lectura >= 0 && Lectura < 150) //VELOCIDAD -5
		  		  {
			  x=-5;
		  			  conteo = TIM1->CNT;
		  			  TIM1 -> ARR = 3;
		  			  TIM1 -> PSC = 20000;
		  		  }
		  		  else if (Lectura >=150 && Lectura <500) //VELOCIDAD -4
		  		  {
		  			  x=-4;
		  			  conteo = TIM1->CNT;
		  			  TIM1 -> ARR = 3;
		  			  TIM1 -> PSC = 30000;
		  		  }
		  		  else if (Lectura >=500 && Lectura<1000) // VELOCIDAD -3
		  		  {
		  			  x=-3;
		  			  conteo = TIM1->CNT;
		  			  TIM1 -> ARR = 3;
		  			  TIM1 -> PSC = 40000;
		  		  }
		  		  else if (Lectura >=1000 && Lectura<1200) //VELOCIDAD -2
		  		  {
		  			  x=-2;
		  			  conteo = TIM1->CNT;
		  			  TIM1 -> ARR = 3;
		  			  TIM1 -> PSC = 50000;
		  		  }
		  		  else if (Lectura >=1200 && Lectura<1800)//VELOCIDAD -1
		  		  {
		  			  x=-1;
		  			  conteo = TIM1->CNT;
		  			  TIM1 -> ARR = 3;
		  			  TIM1 -> PSC = 65000;
		  		  }
		  		  else if (Lectura >=1800 && Lectura<2100)//VELOCIDAD 0
		  		  {
		  			  x=0;
		  			  conteo = -1;
		  			  conteo = TIM1->CNT;
		  			  conteo = TIM2->CNT;
		  			  conteo = -1;
		  		  }
		  		  else if (Lectura >= 2100 && Lectura <2599)//VELOCIDAD 1
		  		  {
		  			  x=1;
		  			  conteo = TIM2->CNT;
		  			  TIM2 -> ARR = 3;
		  			  TIM2 -> PSC = 65000;

		  		  }
		  		  else if (Lectura >= 2600 && Lectura < 3099)//VELOCIDAD 2
		  		  {
		  			  x=2;
		  			  conteo = TIM2->CNT;
		  			  TIM2 -> ARR = 3;
		  			  TIM2 -> PSC = 50000;
		  		  }
		  		  else if (Lectura >= 3100 && Lectura < 3599)//VELOCIDAD 3
		  		  {
		  			  x=3;
		  			  conteo = TIM2->CNT;
		  			  TIM2 -> ARR = 3;
		  			  TIM2 -> PSC = 40000;
		  		  }
		  		  else if (Lectura >= 3600 && Lectura < 4094)//VELOCIDAD 4
		  		  {
		  			  x=4;
		  			  conteo = TIM2->CNT;
		  			  TIM2 -> ARR = 3;
		  			  TIM2 -> PSC = 30000;
		  		  }
		  		  else if (Lectura >= 4095)//VELOCIDAD 5
		  		  {
		  			  x=5;
		  			  conteo = TIM2->CNT;
		  			  TIM2 -> ARR = 3;
		  			  TIM2 -> PSC = 20000;
		  		  }

		  switch(conteo)
		  			{
		  			case 0:
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
		  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
		  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
		  				break;

		  			case 1:
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
		  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
		  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
		  				break;

		  			case 2:
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
		  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
		  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
		  				break;


		  			case 3:
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
		  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
		  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
		  				break;


		  			default:
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
		  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
		  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
		  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
		  				break;
		  			}
	 		sprintf(mensaje,"SIMP %d Vel\n\r", x);
		  		 		HAL_UART_Transmit(&huart2, mensaje, 14, 100);

	  }

	  switch (boton )
	  {

	  case 0: //PRESIONADO
		  // 0 AL 10
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);

		  if (Lectura >= 0 && Lectura < 150) //VELOCIDAD -5
		  {
			  x=-5;
			  conteo = TIM1->CNT;
			  TIM1 -> ARR = 3;
			  TIM1 -> PSC = 20000;
		  }
		  else if (Lectura >=150 && Lectura <500) //VELOCIDAD -4
		  {
			  x=-4;
			  conteo = TIM1->CNT;
			  TIM1 -> ARR = 3;
			  TIM1 -> PSC = 30000;
		  }
		  else if (Lectura >=500 && Lectura<1000) // VELOCIDAD -3
		  {
			  x=-3;
			  conteo = TIM1->CNT;
			  TIM1 -> ARR = 3;
			  TIM1 -> PSC = 40000;
		  }
		  else if (Lectura >=1000 && Lectura<1200) //VELOCIDAD -2
		  {
			  x=-2;
			  conteo = TIM1->CNT;
			  TIM1 -> ARR = 3;
			  TIM1 -> PSC = 50000;
		  }
		  else if (Lectura >=1200 && Lectura<1800)//VELOCIDAD -1
		  {
			  x=-1;
			  conteo = TIM1->CNT;
			  TIM1 -> ARR = 3;
			  TIM1 -> PSC = 65000;
		  }
		  else if (Lectura >=1800 && Lectura<2100)//VELOCIDAD 0
		  {
			  x=0;
			  conteo = -1;
			  conteo = TIM1->CNT;
			  conteo = TIM2->CNT;
			  conteo = -1;
		  }
		  else if (Lectura >= 2100 && Lectura <2599)//VELOCIDAD 1
		  {
			  x=1;
			  conteo = TIM2->CNT;
			  TIM2 -> ARR = 3;
			  TIM2 -> PSC = 65000;

		  }
		  else if (Lectura >= 2600 && Lectura < 3099)//VELOCIDAD 2
		  {
			  x=2;
			  conteo = TIM2->CNT;
			  TIM2 -> ARR = 3;
			  TIM2 -> PSC = 47000;
		  }
		  else if (Lectura >= 3100 && Lectura < 3599)//VELOCIDAD 3
		  {
			  x=3;
			  conteo = TIM2->CNT;
			  TIM2 -> ARR = 3;
			  TIM2 -> PSC = 37000;
		  }
		  else if (Lectura >= 3600 && Lectura < 4094)//VELOCIDAD 4
		  {
			  x=4;
			  conteo = TIM2->CNT;
			  TIM2 -> ARR = 3;
			  TIM2 -> PSC = 27000;
		  }
		  else if (Lectura >= 4095)//VELOCIDAD 5
		  {
			  x=5;
			  conteo = TIM2->CNT;
			  TIM2 -> ARR = 3;
			  TIM2 -> PSC = 22000;
		  }


			switch(conteo)
			{
			case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
				break;

			case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
				break;

			case 2:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
				break;


			case 3:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
				break;


			default:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
				break;
			}
		 		sprintf(mensaje,"FULL %d Vel\n\r", x);
		 		HAL_UART_Transmit(&huart2, mensaje, 14, 100);
		  break;

	  case 1: //*SIN PRESIONAR*//

	  if (Lectura >= 0 && Lectura < 150) //VELOCIDAD -5
	  {
		  x=-5;
		  conteo = TIM1->CNT;
		  TIM1 -> ARR = 7;
		  TIM1 -> PSC = 9000;
	  }
	  else if (Lectura >=150 && Lectura <500) //VELOCIDAD -4
	  {
		  x=-4;
		  conteo = TIM1->CNT;
		  TIM1 -> ARR = 7;
		  TIM1 -> PSC = 12000;
	  }
	  else if (Lectura >=500 && Lectura<1000) // VELOCIDAD -3
	  {
		  x=-3;
		  conteo = TIM1->CNT;
		  TIM1 -> ARR = 7;
		  TIM1 -> PSC = 16499;
	  }
	  else if (Lectura >=1000 && Lectura<1200) //VELOCIDAD -2
	  {
		  x=-2;
		  conteo = TIM1->CNT;
		  TIM1 -> ARR = 7;
		  TIM1 -> PSC = 27999;
	  }
	  else if (Lectura >=1200 && Lectura<1800)//VELOCIDAD -1
	  {
		  x=-1;
		  conteo = TIM1->CNT;
		  TIM1 -> ARR = 7;
		  TIM1 -> PSC = 65500;
	  }
	  else if (Lectura >=1800 && Lectura<2100)//VELOCIDAD 0
	  {
		  x=0;
		  conteo = -1;
		  conteo = TIM1->CNT;
		  conteo = TIM2->CNT;
		  conteo = -1;
	  }
	  else if (Lectura >= 2100 && Lectura <2599)//VELOCIDAD 1
	  {
		  x=1;
		  conteo = TIM2->CNT;
		  TIM2 -> ARR = 7;
		  TIM2 -> PSC = 65500;

	  }
	  else if (Lectura >= 2600 && Lectura < 3099)//VELOCIDAD 2
	  {
		  x=2;
		  conteo = TIM2->CNT;
		  TIM2 -> ARR = 7;
		  TIM2 -> PSC = 24999;
	  }
	  else if (Lectura >= 3100 && Lectura < 3599)//VELOCIDAD 3
	  {
		  x=3;
		  conteo = TIM2->CNT;
		  TIM2 -> ARR = 7;
		  TIM2 -> PSC = 12499;
	  }
	  else if (Lectura >= 3600 && Lectura < 4094)//VELOCIDAD 4
	  {
		  x=4;
		  conteo = TIM2->CNT;
		  TIM2 -> ARR = 7;
		  TIM2 -> PSC = 10000;
	  }
	  else if (Lectura >= 4095)//VELOCIDAD 5
	  {
		  x=5;
		  conteo = TIM2->CNT;
		  TIM2 -> ARR = 7;
		  TIM2 -> PSC = 9000;
	  }


		switch(conteo)
		{

		case 0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			break;

		case 1:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			break;

		case 2:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			break;

		case 3:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			break;

		case 4:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			break;

		case 5:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
			break;

		case 6:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
			break;

		case 7:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
			break;


		default:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			break;
		}

		sprintf(mensaje,"HALF %d Vel\n\r", x);
		HAL_UART_Transmit(&huart2, mensaje, 14, 100);
		break;

	  default:
		  break;
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 56817;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 10;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 56817;
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
  htim2.Init.Period = 10;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BOBINA_0_Pin|BOBINA_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BOBINA_5_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOBINA_3_GPIO_Port, BOBINA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BOTON_Pin PC2 */
  GPIO_InitStruct.Pin = BOTON_Pin|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BOBINA_0_Pin BOBINA_1_Pin */
  GPIO_InitStruct.Pin = BOBINA_0_Pin|BOBINA_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BOBINA_5_Pin LED_Pin */
  GPIO_InitStruct.Pin = BOBINA_5_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOBINA_3_Pin */
  GPIO_InitStruct.Pin = BOBINA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BOBINA_3_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
